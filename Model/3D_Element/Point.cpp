/*************************************************************************
【文件名】                 Point3D.cpp
【功能模块和目的】         实现Point3D3D类
【开发者及日期】           刘东琛 2024.8.1
【更改记录】               （若修改过则必需注明）
*************************************************************************/

#include "Point.hpp"
#include "Vector.hpp"
#include <stdexcept>
#include <sstream>
#include <string>

/*************************************************************************
【函数名称】       Point3D()
【函数功能】       point指定三个坐标的构造函数
【参数】           三个坐标x,y,z
【返回值】         无
【开发者及日期】   刘东琛 2024.8.1
【更改记录】       （若有修改，则必需注明）
*************************************************************************/
Point3D::Point3D(double x, double y, double z){
    *this = Vector( { x, y, z } );
}

/*************************************************************************
【函数名称】       operator=()
【函数功能】       保证使用vector给point赋值时维度不出错
【参数】           vector
【返回值】         无
【开发者及日期】   刘东琛 2024.8.1
【更改记录】       （若有修改，则必需注明）
*************************************************************************/
Point3D& Point3D::operator=(const Vector& Source) {
    if (Source.Dimension() != 3) {
        throw std::invalid_argument
            ("Cannot assign a non-3D vector to a Point3D");
    }
    else if (this != &Source) {
        Vector::operator=(Source);
    }
    return *this;
}

/*************************************************************************
【函数名称】       point3D()
【函数功能】       拷贝构造函数
【参数】           被拷贝的Source
【返回值】         无
【开发者及日期】   刘东琛 2024.8.1
【更改记录】       （若有修改，则必需注明）
*************************************************************************/
Point3D::Point3D(const Point3D& Source) {
    m_Coordinates = Source.m_Coordinates;
}

/*************************************************************************
【函数名称】       ~Point3D()
【函数功能】       虚析构函数
【参数】           无
【返回值】         无
【开发者及日期】   刘东琛 2024.8.1
【更改记录】       （若有修改，则必需注明）
*************************************************************************/
Point3D::~Point3D() {

}

/*************************************************************************
【函数名称】       operator=()
【函数功能】       重载point类的赋值运算符
【参数】           参与赋值的点
【返回值】         Point&
【开发者及日期】   刘东琛 2024.8.1
【更改记录】       （若有修改，则必需注明）
*************************************************************************/
Point3D& Point3D::operator=(const Point3D& Source) {
    if (Source != *this) {
        Vector::operator=(Source);
    }
    return *this;
}

/*************************************************************************
【函数名称】       operator+()
【函数功能】       重载point类的与vector相加运算符
【参数】           参与运算的vector
【返回值】         Point&
【开发者及日期】   刘东琛 2024.8.1
【更改记录】       （若有修改，则必需注明）
*************************************************************************/
Point3D Point3D::operator+(const Vector& v) const {
    Point3D p;
    p.Vector::operator+(v);
    return p;
}
/*************************************************************************
【函数名称】       operator==()
【函数功能】       重载point类的判断相等运算符
【参数】           参与判断的点
【返回值】         bool
【开发者及日期】   刘东琛 2024.8.1
【更改记录】       （若有修改，则必需注明）
*************************************************************************/
bool Point3D::operator==(const Point3D& APoint) const {
    return Vector::operator==(APoint);
}

/*************************************************************************
【函数名称】       operator！=()
【函数功能】       重载point类的判断不等运算符
【参数】           参与判断的点
【返回值】         bool
【开发者及日期】   刘东琛 2024.8.1
【更改记录】       （若有修改，则必需注明）
*************************************************************************/
bool Point3D::operator!=(const Point3D& APoint) const {
    return !operator==(APoint);
}

/*************************************************************************
【函数名称】       GetPosition()
【函数功能】       使用xyz指定坐标访问点的坐标
【参数】           需要访问的坐标
【返回值】         double 坐标值
【开发者及日期】   刘东琛 2024.8.1
【更改记录】       （若有修改，则必需注明）
*************************************************************************/
double Point3D::GetPosition(Coord Axis) const {
    switch (Axis) {
        case Coord::x : return Vector::operator[](0);  
        case Coord::y : return Vector::operator[](1);
        case Coord::z : return Vector::operator[](2);
        default: throw std::invalid_argument("Invalid Axis");
    }
}

/*************************************************************************
【函数名称】       operator[]()
【函数功能】       重载下标访问
【参数】           需要访问的坐标
【返回值】         double 坐标值
【开发者及日期】   刘东琛 2024.8.1
【更改记录】       （若有修改，则必需注明）
*************************************************************************/
double Point3D::operator[](Coord Axis) const {
    return GetPosition(Axis);
}

/*************************************************************************
【函数名称】       operator[]()
【函数功能】       通过下标修改point的坐标
【参数】           需要修改的坐标
【返回值】         double& 坐标值的引用
【开发者及日期】   刘东琛 2024.8.1
【更改记录】       （若有修改，则必需注明）
*************************************************************************/
double& Point3D::operator[](Coord Axis) {
    switch (Axis) {
        case Coord::x : return Vector::operator[](0); 
        case Coord::y : return Vector::operator[](1);
        case Coord::z : return Vector::operator[](2);
        default: throw std::invalid_argument("Invalid Axis");
    }
}

/*************************************************************************
【函数名称】       CalDistance
【函数功能】       静态调用计算两个点之间的距离
【参数】           参与计算的两个点
【返回值】         double 距离值
【开发者及日期】   刘东琛 2024.8.1
【更改记录】       （若有修改，则必需注明）
*************************************************************************/
double Point3D::CalDistance(const Point3D& p1,const Point3D& p2) {
    return (p1 - p2).CalNorm();
}

/*************************************************************************
【函数名称】       CalDistance
【函数功能】       通过一个对象调用计算两个点之间的距离
【参数】           参与计算的另一个点
【返回值】         double 距离值
【开发者及日期】   刘东琛 2024.8.1
【更改记录】       （若有修改，则必需注明）
*************************************************************************/
double Point3D::CalDistance(const Point3D& APoint3D) const {
    return CalDistance(*this, APoint3D);
}

/*************************************************************************
【函数名称】       operator<<()
【函数功能】       通过友元重载<<流运算符实现对点类信息的输出
【参数】           需要输出的点类
【返回值】         ostream 输出流
【开发者及日期】   刘东琛 2024.8.1
【更改记录】       （若有修改，则必需注明）
*************************************************************************/
std::ostream& operator<<(std::ostream& out, Point3D& APoint3D) {
    out << "(" << APoint3D[Coord::x] << "," 
        << APoint3D[Coord::y] << "," << APoint3D[Coord::z] << ")";
        return out;
}

/*************************************************************************
【函数名称】       operator>>()
【函数功能】       通过友元重载>>流运算符实现对点的按格式输入
【参数】           需要输入的点类
【返回值】         istream 输入流
【开发者及日期】   刘东琛 2024.8.1
【更改记录】       （若有修改，则必需注明）
*************************************************************************/
std::istream& operator>>(std::istream& in, Point3D& APoint3D) {
    //支持点按照(x,y,z)的格式输入
    char ch1, ch2, ch3, ch4;
    //使用ws忽略中间可能的空格
    in >> std::ws >> ch1 >> std::ws >> APoint3D[Coord::x]
        >> std::ws >> ch2 >> std::ws >> APoint3D[Coord::y] 
        >> std::ws >> ch3 >> std::ws >> APoint3D[Coord::z] 
        >> std::ws >> ch4;
    if (ch1 != '(' || ch2 != ',' || ch3 != ',' || ch4 != ')') {
        throw std::invalid_argument("Invalid input format for Point3D");
    }
    return in;
}

/*************************************************************************
【函数名称】       ToString
【函数功能】       通过获取对象的信息字符串输出对象信息
【参数】           无
【返回值】         string 对象信息的字符串
【开发者及日期】   刘东琛 2024.8.1
【更改记录】       （若有修改，则必需注明）
*************************************************************************/
std::string Point3D::ToString() const {
    std::ostringstream outstr;
    outstr << "(" << (*this)[Coord::x] << "," 
        << (*this)[Coord::y] << "," << (*this)[Coord::z] << ")";
    return outstr.str();
}